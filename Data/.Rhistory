(85+25)/nrow(housing.test)
polymod <- tune.poly$best.model
w <- t(polymod$coefs) %*% polymod$SV
w
# pick the x and y coefficients
bx = w[2] # Total Utilities
by = w[4] # Number of couples
b0 = polymod$rho # equivalent to beta_0 in e1071 implementation
# plot
base = ggplot(data=housing, mapping= aes(x = hhincome, y = highest_ed))
base + geom_point(aes(color=owned)) +
geom_abline(slope=-bx/by, intercept=b0/by, color='black') +
geom_abline(slope=-bx/by, intercept=(b0+1)/by, color='gray') +
geom_abline(slope=-bx/by, intercept=(b0-1)/by, color='gray') +
geom_point(data=data.frame(polymod$SV),
mapping = aes(x = hhincome, y = highest_ed), shape=4, size=5)
ggsave("svmpoly.png")
plot(x1, x2)
x1 = c(1,1,0,5,6,4)
x2 = c(4,3,4,1,2,0)
plot(x1, x2)
library(tidyverse)
library(ISLR2)
library(RSpectra)
plot(x1, x2)
c1 <- sample(x1, 3)
c1 <- sample(1:6, 3)
c1 <- sample(1:6, 3)
set.seed(1)
c1 <- sample(1:6, 3)
set.seed(1)
c1 <- sample(1:6, 3)
c <- sample(1:6, 3)
set.seed(1)
c <- sample(1:6, 3)
data <- rbind(x1, x2)
View(data)
data <- rbind(x1, x2, along = 1)
View(data)
data <- rbind(x1, x2, along = 2)
x1 <- c(1,1,0,5,6,4)
x2 <- c(4,3,4,1,2,0)
data <- rbind(x1, x2, along = 2)
View(data)
data <- data.frame(x1, x2)
View(data)
c1 <- data[,sample]
c1 <- data[,c]
c1 <- data[c,]
View(c1)
distA <- sqrt(((data$x1 - 0.5)^2) + ((data$x2 - 3)^2))
c1 <- mean(data[c,]) #mean of x and y is centroid
c2 <- (data[-c,])
c1 <- data[c,] #mean of x and y is centroid
c2 <- data[-c,]
View(c1)
#c2 <- data[-c,]
```
c1 <- c(mean(data[c,]$x1), mean(data[c,]$x2)) #mean of x and y is centroid
#c2 <- data[-c,]
x1 <- c(1,1,0,5,6,4)
x2 <- c(4,3,4,1,2,0)
label <- c(a, b, a, a, b, b)
x1 <- c(1,1,0,5,6,4)
x2 <- c(4,3,4,1,2,0)
label <- c("a", "b", "a", "a", "b", "b")
data <- data.frame(x1, x2, label)
plot(x1, x2, color = label)
plot(x1, x2, col = data$label)
plot(data$x1, data$x2, col = data$label)
data <- data.frame(x1, x2, label, stringsAsFactors = TRUE)
plot(data$x1, data$x2, col = data$label)
plot(c1)
plot(data$x1, data$x2, col = data$label)
plot(c1)
plot(data$x1, data$x2, col = data$label)
point(2,3)
plot(data$x1, data$x2, col = data$label)
c1 <- c(mean(data[c,]$x1), mean(data[c,]$x2)) #mean of x and y is centroid
c2 <- c(mean(data[-c,]$x1), mean(mean[-c]$x2))
c2 <- c(mean(data[-c,]$x1), mean([-c]$x2))
c2 <- c(mean(data[-c,]$x1), mean(data[-c]$x2))
x1 <- c(1,1,0,5,6,4)
x2 <- c(4,3,4,1,2,0)
set.seed(1)
c <- sample(1:6, 3)
label <- c("c1", "c2", "c1", "c1", "c2", "c2")
data <- data.frame(x1, x2, label, stringsAsFactors = TRUE)
plot(data$x1, data$x2, col = data$label)
c1 <- c(mean(data[c,]$x1), mean(data[c,]$x2)) #mean of x and y is centroid
c2 <- c(mean(data[-c,]$x1), mean(data[-c]$x2))
c1[1]
distA <- sqrt(((data$x1 - c1[1])^2) + ((data$x2 - c1[2])^2))
distB <- sqrt(((data$x1 - c2[1])^2) + ((data$x2 - c2[2])^2))
info(College)
college <- College[-private,]
college <- College[-Private,]
college <- subset(college, select = -Private)
college <- subset(College, select = -Private)
View(college)
college <- scale(college)
kmeansmod <- kmeans(college, 2, nstart = 20)
plot(kmeansmod)
View(college)
plot(college$Apps, college$Accept, col = kmeansmod$cluster)
plot(College$Apps, College$Accept, col = kmeansmod$cluster)
kmeansmod
kmeansmod$tot.withinss
svd <- svds(college, 17)
svdcol <- svds(college, 17)
kmeansmod <- kmeans(S$u, 2, nstart = 20)
S <- svds(college, 17)
kmeansmod <- kmeans(S$u, 2, nstart = 20)
plot(S$u[1,], S$u[2,])
plot(S$u[,1], S$u[,1])
plot(S$u[,1], S$u[,2])
kmeanssvd <- kmeans(S$u, 2, nstart = 20)
plot(S$u[,1], S$u[,2], col = kmeanssvd$cluster)
kmeanssvd$tot.withinss
private <- as.factor(College$Private)
kmeansmod <- kmeans(college, 2, nstart = 20)
plot(college$Apps, college$Accept, col = kmeansmod$cluster)
college$Apps
college <- data.frame(scale(college))
kmeansmod <- kmeans(college, 2, nstart = 20)
plot(college$Apps, college$Accept, col = kmeansmod$cluster)
plot(college$Apps, college$Enroll, col = kmeansmod$cluster)
View(college)
plot(college$Apps, college$Grad.Rate, col = kmeansmod$cluster)
private
College$Private
private <- ifelse(College$Private = 'Yes', 1, 2)
private <- ifelse(College$Private == 'Yes', 1, 2)
private
library(tidyverse)
library(ISLR2)
library(RSpectra)
x1 <- c(1,1,0,5,6,4)
x2 <- c(4,3,4,1,2,0)
set.seed(1)
c <- sample(1:6, 3)
label <- c("c1", "c2", "c1", "c1", "c2", "c2")
data <- data.frame(x1, x2, label, stringsAsFactors = TRUE)
plot(data$x1, data$x2, col = data$label)
c1 <- c(mean(data[c,]$x1), mean(data[c,]$x2)) #mean of x and y is centroid
c2 <- c(mean(data[-c,]$x1), mean(data[-c]$x2))
distA <- sqrt(((data$x1 - c1[1])^2) + ((data$x2 - c1[2])^2))
distB <- sqrt(((data$x1 - c2[1])^2) + ((data$x2 - c2[2])^2))
#for (i in 1:6){}
college <- subset(College, select = -Private)
college <- data.frame(scale(college))
cl <- kmeans(college, 2, nstart = 20)
plot(college$Apps, college$Grad.Rate, col = clmod$cluster)
plot(college$Apps, college$Grad.Rate, col = cl$cluster)
cl$tot.withinss
(c) Run a singular value decomposition on the college data using the `svd()` function from the `Rspectra` package. Plot and interpret the proportion of variance explained using the d vector.
clsvd <- kmeans(S$u, 2, nstart = 20)
S <- svds(college, 17)
college <- subset(College, select = -Private)
coll2 <- scale(college)
college <- data.frame(coll2)
plot(coll2$Apps, coll2$Grad.Rate, col = cl$cluster)
cl <- kmeans(college, 2, nstart = 20)
plot(college$Apps, college$Grad.Rate, col = cl$cluster)
S <- svds(coll3, 17)
S <- svds(coll2, 17)
clsvd <- kmeans(S$u, 2, nstart = 20)
plot(S$u[,1], S$u[,2], col = clsvd$cluster)
clsvd
cl$cluster
table(private, cl$cluster)
private <- ifelse(College$Private == 'Yes', 1, 2)
table(private, cl$cluster)
len(college)
length(college)
length(college[,1])
collegesubs <- college[,subs]
set.seed(1)
subs <- sample(1:length(college[,1]))
collegesubs <- college[,subs]
collegesubs <- college[subs,]
subs <- sample(1:length(college[,1]), 50)
collegesubs <- college[subs,]
hclcent<- hclust(collegesubs, method = "centroid")
View(collegesubs)
hclsingle <- hclust(collegesubs, method = "single")
View(collegesubs)
hclsingle <- hclust(dist(collegesubs), method = "single")
hclcent<- hclust(dist(collegesubs), method = "centroid")
hclsingle <- hclust(dist(collegesubs), method = "single")
hclcomp <- hclust(dist(collegesubs), method = "complete")
hclaverage <- hclust(dist(collegesubs), method = "average")
hclcent<- hclust(dist(collegesubs), method = "centroid")
plot(hclsingle)
par(mfrow = c(4,1))
plot(hclsingle, hclcomp, hclaverage hclcent)
plot(hclsingle, hclcomp, hclaverage, hclcent)
par(mfrow = c(4,1))
plot(hclsingle, hclcomp, hclaverage, hclcent)
hclsingle <- hclust(dist(collegesubs), method = "single")
hclcomp <- hclust(dist(collegesubs), method = "complete")
hclaverage <- hclust(dist(collegesubs), method = "average")
hclcent<- hclust(dist(collegesubs), method = "centroid")
par(mfrow = c(4,1))
plot(hclsingle, hclcomp, hclaverage, hclcent)
plot(hclsingle, hclcomp)
par(mfrow = c(4,1))
plot(hclsingle, hclcomp)
#par(mfrow = c(4,1))
plot(hclsingle)
#par(mfrow = c(4,1))
plot(hclcomp)
#par(mfrow = c(4,1))
plot(hclaverage
#par(mfrow = c(4,1))
plot(hclaverage)
#par(mfrow = c(4,1))
plot(hclcent)
plot(hclcent)
plot(hclcent)
par(mfrow = c(4,1))
plot(hclcent)
par(mfrow = c(1,4))
plot(hclcent)
plot(hclcent)
plot(hclcent)
plot(hclcent)
par(mfrow = c(1,4))
plot(hclsingle)
plot(hclcomp)
plot(hclaverage)
plot(hclcent)
compsmall <- cutree(hclcomp, 5)
plot(compsmall)
compsmall <- cutree(hclcomp, k = 5)
compsmall <- cutree(hclcomp, k = 5)
plot(compsmall)
compsmall <- cutree(hclcomp, k = 1:5)
plot(compsmall)
compsmall <- cutree(hclcomp, k = 5)
plot(compsmall)
plot(as.dendrogram(compsmall))
library(tidyverse)
library(readxl)
library(abind)
#Get a list of all the sheet names
sheets <- excel_sheets("001_Main SPEED Dataset 2015.xlsx")
printWD()
getwd()
setwd('/Users/actt/Documents/GitHub/data5322-hw4')
library(tidyverse)
library(readxl)
library(abind)
#Get a list of all the sheet names
sheets <- excel_sheets("s001_Main SPEED Dataset 2015.xlsx")
library(tidyverse)
library(readxl)
library(abind)
#Get a list of all the sheet names
sheets <- excel_sheets("001_Main SPEED Dataset 2015.xlsx")
library(tidyverse)
library(readxl)
library(abind)
#Get a list of all the sheet names
sheets <- excel_sheets("~/Data/001_Main SPEED Dataset 2015.xlsx")
library(tidyverse)
library(readxl)
library(abind)
#Get a list of all the sheet names
sheets <- excel_sheets("Data/001_Main SPEED Dataset 2015.xlsx")
#How many sheets there are total
n <- length(sheets)
#Create the 2000 data frame using the first data sheet
data2010 <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols("AI"))[1:147,]
library(tidyverse)
library(readxl)
library(abind)
#Get a list of all the sheet names
sheets <- excel_sheets("/Data/001_Main SPEED Dataset 2015.xlsx")
setwd('/Users/actt/Documents/GitHub/data5322-hw4/Data')
library(tidyverse)
library(readxl)
library(abind)
#Get a list of all the sheet names
sheets <- excel_sheets("001_Main SPEED Dataset 2015.xlsx")
#How many sheets there are total
n <- length(sheets)
#Create the 2000 data frame using the first data sheet
data2010 <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols("AI"))[1:147,]
#Read in the rest of the sheets and add to data frame
for (i in 4:n){
currentsheet <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = i, range = cell_cols("AI"))[1:147,]
data2010 <- data.frame(data2010, currentsheet)
}
#Rename columns
colnames(data2010) <- sheets[3:n]
#add in country and region
data2010 <- data.frame(read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols("A:B"))[1:147,], data2000)
library(tidyverse)
library(readxl)
library(abind)
#Get a list of all the sheet names
sheets <- excel_sheets("001_Main SPEED Dataset 2015.xlsx")
#How many sheets there are total
n <- length(sheets)
#Create the 2000 data frame using the first data sheet
data2010 <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols("AI"))[1:147,]
#Read in the rest of the sheets and add to data frame
for (i in 4:n){
currentsheet <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = i, range = cell_cols("AI"))[1:147,]
data2010 <- data.frame(data2010, currentsheet)
}
#Rename columns
colnames(data2010) <- sheets[3:n]
#add in country and region
data2010 <- data.frame(read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols("A:B"))[1:147,], data2010)
#save the data
save(data2010, file = 'data2010.Rdata')
load("~/Documents/GitHub/data5322-hw4/Data/data2010.Rdata")
library(randomForest)
library(tidyverse)
library(dplyr)
library(tree)
library(randomForest)
library(gbm)
getwd()
load('data2000.Rdata')
yearcol = 'AI'
df <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols(yearcol))[1:147,]
View(df)
function(yearcol){
#Initialize data frame with first sheet
df <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols(yearcol))[1:147,]
#Read in the rest of the data
for (i in 4:n){
currentsheet <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = i, range = cell_cols(yearcol))[1:147,]
df <- data.frame(df, currentsheet)
}
#Rename columns
colnames(df) <- sheets[3:n]
#add in country and region
df<- data.frame(read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols("A:B"))[1:147,], df)
return(df)
}
get_data <- function (yearcol){
#Initialize data frame with first sheet
df <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols(yearcol))[1:147,]
#Read in the rest of the data
for (i in 4:n){
currentsheet <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = i, range = cell_cols(yearcol))[1:147,]
df <- data.frame(df, currentsheet)
}
#Rename columns
colnames(df) <- sheets[3:n]
#add in country and region
df<- data.frame(read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols("A:B"))[1:147,], df)
return(df)
}
test <- get_data('AI')
View(test)
data2000 <- get_data('Y')
data2010 <- get_data('AI')
View(data2010)
View(data2000)
# remove columns that are mostly null (1980)
cols <- c("com_ppp", "com_us", "gdpcom_ppp", "popcom_ppp", "totcom_ppp",
"transp_ppp", "transp_us", "gdptransp_ppp", "poptransp_ppp", "tottransp_ppp",
"mining_ppp", "mining_us", "gdpmining_ppp", "popmining_ppp", "totmining_ppp",
"fuel_ppp", "fuel_us", "gdpfuel_ppp", "popfuel_ppp", "totfuel_ppp")
df1980 <- data1980[, -which(names(data1980) %in% cols)]
#function to remove unwanted columns and omit nas
remove_data <- function (df){
df <- df[, -which(names(df) %in% cols)]
df <- na.omit(df)
}
test <- remove_data(data2000)
View(test)
View(data2000)
View(test)
data2000 <- df2000[df2000$country %in% df2010$country,]
data2010 <- remove_data(data2010)
data2000 <- remove_data(data2000)
data2010 <- remove_data(data2010)
data2000 <- data2000[data2000$country %in% data2010$country,]
data2010 <- data2010[data2010$country %in% data2000$country,]
save(data2000, file = 'data2010.Rdata')
save(data2010, file = 'data2012.Rdata')
View(data2010)
View(data2000)
View(data2000)
data2000 <- get_data('Y')
data2010 <- get_data('AI')
data2000 <- remove_data(data2000)
#data2010 <- remove_data(data2010)
data2000 <- remove_data(data2000)
data2010 <- remove_data(data2010)
data2000 <- get_data('Y')
data2010 <- get_data('AI')
data2000 <- remove_data(data2000)
data2010 <- remove_data(data2010)
data2000 <- data2000[data2000$country %in% data2010$country,]
#data2010 <- data2010[data2010$country %in% data2000$country,]
data2010 <- data2010[data2010$country %in% data2000$country,]
save(data2000, file = 'data2010.Rdata')
save(data2010, file = 'data2012.Rdata')
View(data2010)
data2000 <- get_data('Y')
data2010 <- get_data('AI')
# columns that are mostly null (1980)
cols <- c("ag_ppp", "ag_us", "aggdpag_ppp", "com_ppp", "com_us", "defense_ppp", "defense_us", "education_ppp", "education_us",
"fuel_ppp", "fuel_us", "health_ppp", "health_us", "mining_ppp", "mining_us", "other_ppp", "other_us", "popag_ppp",
"popcom_ppp", "popdefense_ppp", "popeducation_ppp", "popfuel_ppp", "pophealth_ppp", "popmining_ppp", "popother_ppp",
"popsp_ppp", "poptc_ppp", "poptotal_ppp", "poptransp_ppp", "sp_ppp", "sp_us", "tc_ppp", "tc_us", "totag_ppp", "total_ppp",
"total_us", "totcom_ppp", "totdefense_ppp", "toteducation_ppp", "totfuel_ppp", "tothealth_ppp", "totmining_ppp",
"totother_ppp", "totsp_ppp", "tottc_ppp", "tottransp_ppp", "transp_ppp", "transp_us", "gdpfuel_ppp", "gdpcom_ppp")
#function to remove unwanted columns and omit nas
remove_data <- function (df){
df <- df[, -which(names(df) %in% cols)]
df <- na.omit(df)
return(df)
}
data2000 <- remove_data(data2000)
data2010 <- remove_data(data2010)
data2000 <- data2000[data2000$country %in% data2010$country,]
data2010 <- data2010[data2010$country %in% data2000$country,]
save(data2000, file = 'data2010.Rdata')
save(data2010, file = 'data2012.Rdata')
load('data2000.Rdata')
library(tidyverse)
library(readxl)
library(abind)
sheets <- excel_sheets("001_Main SPEED Dataset 2015.xlsx")
n <- length(sheets)
get_data <- function (yearcol){
#Initialize data frame with first sheet
df <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols(yearcol))[1:147,]
#Read in the rest of the data
for (i in 4:n){
currentsheet <- read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = i, range = cell_cols(yearcol))[1:147,]
df <- data.frame(df, currentsheet)
}
#Rename columns
colnames(df) <- sheets[3:n]
#add in country and region
df<- data.frame(read_excel("001_Main SPEED Dataset 2015.xlsx", sheet = 3, range = cell_cols("A:B"))[1:147,], df)
return(df)
}
data2000 <- get_data('Y')
data2010 <- get_data('AI')
# columns that are mostly null (1980)
cols <- c("ag_ppp", "ag_us", "aggdpag_ppp", "com_ppp", "com_us", "defense_ppp", "defense_us", "education_ppp", "education_us",
"fuel_ppp", "fuel_us", "health_ppp", "health_us", "mining_ppp", "mining_us", "other_ppp", "other_us", "popag_ppp",
"popcom_ppp", "popdefense_ppp", "popeducation_ppp", "popfuel_ppp", "pophealth_ppp", "popmining_ppp", "popother_ppp",
"popsp_ppp", "poptc_ppp", "poptotal_ppp", "poptransp_ppp", "sp_ppp", "sp_us", "tc_ppp", "tc_us", "totag_ppp", "total_ppp",
"total_us", "totcom_ppp", "totdefense_ppp", "toteducation_ppp", "totfuel_ppp", "tothealth_ppp", "totmining_ppp",
"totother_ppp", "totsp_ppp", "tottc_ppp", "tottransp_ppp", "transp_ppp", "transp_us", "gdpfuel_ppp", "gdpcom_ppp")
#function to remove unwanted columns and omit nas
remove_data <- function (df){
df <- df[, -which(names(df) %in% cols)]
df <- na.omit(df)
return(df)
}
data2000 <- remove_data(data2000)
data2010 <- remove_data(data2010)
data2000 <- data2000[data2000$country %in% data2010$country,]
data2010 <- data2010[data2010$country %in% data2000$country,]
save(data2000, file = 'data2000.Rdata')
save(data2010, file = 'data2010.Rdata')
load('data2000.Rdata')
load('data2010.Rdata')
data2010.test <- data2010[-train, ]
set.seed(1)
train <- sample(1:nrow(data2000), nrow(data2000)*0.6)
data2000.test <- data2000[-train, ]
data2010.test <- data2010[-train, ]
View(data2000)
#remove country
data2000 <- subset(data2000, select = -country)
View(data2000)
data2010 <- subset(data2010, select = -country)
View(data2000)
region2010.test <- data2010$region[-train]
region2000.test <- data2000$region[-train]
tree.2000 <- tree(region ~ . , data2000,
subset = train)
library(tidyverse)
library(dplyr)
library(tree)
library(randomForest)
library(gbm)
tree.2000 <- tree(region ~ . , data2000,
subset = train)
tree.pred <- predict(tree.2000, data2000.test,
type = "class")
View(data2000)
tree2000 <- tree(region ~ . , data2000,
subset = train)
tree2000 <- tree(region ~ . , data2000,
subset = train)
summary(tree2000)
View(data2000)
tree2000 <- tree(region ~ . , data2000, subset = train)
summary(tree2000)
View(tree2000)
library(tidyverse)
library(dplyr)
library(tree)
library(randomForest)
library(gbm)
load('data2000.Rdata')
getwd()
load('data2000.Rdata')
